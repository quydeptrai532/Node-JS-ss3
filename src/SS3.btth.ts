// Enum SystemMode
enum SystemMode {
  AUTO = "AUTO",
  MANUAL = "MANUAL",
}

// Literal type Direction
type Direction = "left" | "right" | "forward" | "backward";

// H√†m logMovement
function logMovement(direction: Direction): void {
  console.log(`üîÑ Moving ${direction}`);
}

// H√†m setMode
function setMode(mode: SystemMode): void {
  console.log(`‚öôÔ∏è System set to ${mode} mode`);
}

// H√†m processInput
function processInput(input: any): void {
  console.log(`üì• Received input (any): ${input}`);
  if (typeof input === "string") {
    console.log(`üîç Input length: ${input.length}`);
  }
}

// H√†m validateInput
function validateInput(input: unknown): void {
  if (typeof input === "number") {
    console.log(`‚úÖ Valid number input: ${input}`);
  } else {
    console.log(`‚ùå Invalid input type`);
  }
}

// H√†m crash
function crash(message: string): never {
  throw new Error(`üí• SYSTEM CRASHED: ${message}`);
}

// Bi·∫øn d√πng annotation
let speed: number = 10;

// Bi·∫øn d√πng inference
let robotName = "AlphaBot";

// Bi·∫øn d√πng enum
let currentMode = SystemMode.AUTO;

// G·ªçi h√†m
logMovement("forward");
logMovement("left");

setMode(SystemMode.AUTO);
setMode(SystemMode.MANUAL);

processInput("Hello robot!");
processInput(12345);

validateInput("string");
validateInput(78);

// G√¢y crash h·ªá th·ªëng
try {
  crash("Overheat detected!");
} catch (error: any) {
  console.log(error.message);
}
